ü§ñ Parte ESP32 (Firmware)

    Essa parte roda diretamente no ESP32 e √© respons√°vel por:

    Ler os dados dos sensores (temperatura, batimentos e oxigena√ß√£o),

    Exibir essas informa√ß√µes no display OLED,

    Conectar-se ao Wi-Fi,

    Enviar os dados via MQTT para o broker.


üì¶ Bibliotecas Utilizadas

    Biblioteca	
        Fun√ß√£o no Projeto
    
    <Wire.h>	
        Habilita a comunica√ß√£o via barramento I2C, utilizado para conectar os sensores e o display ao ESP32.
    <WiFi.h>	
        Respons√°vel por conectar o ESP32 √† rede Wi-Fi, permitindo envio dos dados para o broker MQTT.
    <Preferences.h>	
        Permite armazenar dados persistentes na mem√≥ria flash, como o usu√°rio, mesmo ap√≥s reinicializa√ß√£o.
    <time.h>	
        Utilizada para sincronizar o hor√°rio via NTP (Network Time Protocol), permitindo enviar dados com timestamp correto.
    "MAX30105.h"	
        Controla o sensor MAX30102/30105, respons√°vel por ler batimentos card√≠acos e oxigena√ß√£o do sangue (SpO‚ÇÇ).
    "heartRate.h"	
        Biblioteca complementar ao MAX3010x, usada para processar os sinais e calcular o BPM e o n√≠vel de SpO‚ÇÇ.
    <Adafruit_MLX90614.h>	
        Controla o sensor de temperatura sem contato MLX90614, utilizado para medir a temperatura corporal.
    <Adafruit_SSD1306.h>	
        Usada para controlar o display OLED, onde os dados vitais s√£o exibidos localmente no dispositivo.
    <PubSubClient.h>	
        Implementa o protocolo MQTT, permitindo que o ESP32 publique os dados lidos no broker em tempo real.
    <ArduinoJson.h>	
        Usada para formatar os dados em JSON, facilitando o envio estruturado dos sinais vitais via MQTT para o backend.




üñ•Ô∏è Parte Web (Frontend)
    Essa √© a interface do sistema de monitoramento de sinais vitais, feita em React. √â onde os dados de temperatura, batimentos card√≠acos e oxigena√ß√£o recebidos do ESP32 via MQTT s√£o apresentados visualmente ao usu√°rio. A interface consome os dados enviados pelo broker e pela API, exibindo gr√°ficos e dados em tempo real.


üì¶ Bibliotecas Utilizadas

    Biblioteca	Vers√£o	
        Fun√ß√£o no Projeto
        
    axios	^1.8.1	
        Cliente HTTP para se comunicar com a API REST. √â usado para buscar dados do banco de dados via backend. Ex: listar hist√≥ricos.
    lucide-react	^0.511.0	
        Biblioteca de √≠cones em SVG para React. Usada para melhorar a interface, com √≠cones representando temperatura, batimentos, etc.
    mqtt	^5.10.4	
        Cliente MQTT em JavaScript. Usado para se conectar diretamente ao broker Aedes via WebSocket e receber os dados em tempo real.
    react	^19.0.0	
        Biblioteca base para construir a interface do usu√°rio com componentes reutiliz√°veis.
    react-dom	^19.0.0	
        Respons√°vel por renderizar os componentes React na p√°gina HTML.
    recharts	^2.15.1	
        Biblioteca de gr√°ficos baseada em SVG. Exibe os dados de temperatura, BPM e SpO‚ÇÇ em forma de gr√°ficos de linha e √°rea.
    sweetalert2	^11.21.0	
        Biblioteca de alertas bonitos e personaliz√°veis. Usada para exibir mensagens de confirma√ß√£o, sucesso, erro ou alertas visuais ao usu√°rio, como "Dados enviados com sucesso" ou "Erro ao carregar informa√ß√µes".




üîß Parte API (Backend)
    Essa √© a camada de aplica√ß√£o respons√°vel por fornecer uma interface REST para o frontend. Ela n√£o se comunica diretamente com o ESP32 ‚Äî sua fun√ß√£o √© consultar e armazenar dados no banco de dados, permitindo que a interface web acesse hist√≥ricos, registros e outros dados relevantes de forma segura e organizada.


üì¶ Bibliotecas Utilizadas

    Biblioteca	Vers√£o	
        Fun√ß√£o no Projeto

    cors	^2.8.5	
        Middleware para habilitar requisi√ß√µes entre diferentes origens (CORS). Necess√°rio para permitir que o frontend (React) se comunique com a API no navegador.
    dotenv	^16.4.7	
        Permite carregar vari√°veis de ambiente de um arquivo .env. Usado para armazenar informa√ß√µes sens√≠veis como credenciais do banco de dados.
    express	^4.21.2	
        Framework web leve e r√°pido. √â o n√∫cleo da API, define as rotas HTTP, trata requisi√ß√µes e respostas.
    mysql2	^3.12.0	
        Driver para conectar e interagir com o banco de dados MySQL. Utilizado para salvar e buscar os dados recebidos do ESP32, como BPM, SpO‚ÇÇ e temperatura.




üì° Parte Broker MQTT (aedes)
    Essa √© a ponte principal entre o dispositivo ESP32 e o restante do sistema. O broker MQTT recebe as mensagens publicadas pelo ESP (com dados de temperatura, batimentos card√≠acos e oxigena√ß√£o), e:

    Armazena essas informa√ß√µes diretamente no banco de dados (MySQL),

    Permite que o frontend (web) se conecte via WebSocket MQTT e receba os dados em tempo real.

    Tudo isso √© feito de forma leve, eficiente e sem depender de servi√ßos externos.


üì¶ Bibliotecas Utilizadas

    Biblioteca	Vers√£o	
        Fun√ß√£o no Projeto

    aedes	^0.51.3	
        Broker MQTT leve e embutido em Node.js. √â o n√∫cleo desta parte, recebendo os dados do ESP32 (como BPM, temperatura e SpO‚ÇÇ) via MQTT.
    dotenv	^16.4.7	
        L√™ vari√°veis de ambiente como porta, host do banco, usu√°rio, senha, etc., protegendo informa√ß√µes sens√≠veis.
    http	^0.0.1-security	
        Usado para criar um servidor HTTP que serve como base para a conex√£o WebSocket MQTT. Ele n√£o √© usado para criar rotas HTTP tradicionais (como em uma API), mas sim para abrir uma porta e permitir que o broker MQTT aceite conex√µes via WebSocket, como as que o frontend faz.
    mysql2	^3.12.0	
        Usado para gravar os dados recebidos do ESP diretamente no banco de dados. Cada mensagem recebida pelo aedes √© salva no MySQL.
    net	^1.0.2	
        Cria o servidor TCP puro necess√°rio para aceitar conex√µes MQTT padr√£o (sem WebSocket), como as feitas pelo ESP32.
    ws	^8.18.1	
        Suporte a WebSocket. Permite que o frontend (feito em React) se conecte diretamente ao broker para receber dados em tempo real.
